from mcp.server.fastmcp import FastMCP
from mcp.types import TextContent, ImageContent
import base64
import logging
import os

from tools.gen_openmx_data import gen_openmx_input
from tools.convert_kpath import convert_kpath
from tools.feimi_vector import calculate_fermi_velocity


# Set up logging (this just prints messages to your terminal for debugging)
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Create the MCP server object
mcp = FastMCP()


# Hereâ€™s where you define your tools (functions the AI can use)
@mcp.tool()
def generate_openmx_input(poscar_path: str) -> TextContent:
    """Generate OpenMX input file from POSCAR file.

    Args:
        poscar_path: Path to the POSCAR file.

    Returns:
        Path to the generated OpenMX input file.
    """
    output_dir = "/public/home/chenzz/work/agent/lucien-work/openmx/graphene"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir, exist_ok=True)
    gen_openmx_input(poscar_path, output_dir)
    return TextContent(
        type="text", text=f"OpenMX input generated at {output_dir}/openmx_in.dat"
    )


@mcp.tool()
def use_vaspkit(input_dir: str, code: int) -> TextContent:
    """function to run vaspkit commands.

    Args:
        input_dir: Directory containing the POSCAR file.
        code: Vaspkit command code (e.g., 3 for KPATH generation).

    Returns:
        Output message from vaspkit execution.
    """
    vaspkit_path = "/public/home/chenzz/envs/vaspkit.1.5.1/bin/vaspkit"
    command = f"cd {input_dir} && echo {code} | {vaspkit_path}"
    logger.info(f"Running command: {command}")
    try:
        os.system(command)
        return TextContent(
            type="text", text=f"Vaspkit command {code} executed in {input_dir}"
        )
    except Exception as e:
        return TextContent(type="text", text=f"Error running vaspkit: {str(e)}")


@mcp.tool()
def convert_kpath_file(input_file: str, output_file: str) -> TextContent:
    """Convert vaspkit KPATH.in file to K_PATH format.
    The script reads KPATH.in generated by vaspkit and converts it to deeph format, where each line represents a band segment with:
    [number_of_points] [start_x] [start_y] [start_z] [end_x] [end_y] [end_z] [start_label] [end_label]

    Args:
        input_file: Path to the KPATH.in file with vaspkit format
        output_file: Path to the converted K_PATH file with deeph format

    Returns:
        Path to the converted K_PATH file.
    """
    try:
        convert_kpath(input_file, output_file)
        return TextContent(
            type="text", text=f"Successfully converted {input_file} to {output_file}"
        )
    except Exception as e:
        return TextContent(type="text", text=f"Error during conversion: {str(e)}")


@mcp.tool()
def get_png(image_path: str) -> ImageContent:
    """Return a PNG image as base64-encoded data.

    Args:
        image_path: Path to the PNG image file.

    Returns:
        Base64-encoded image data.
    """
    with open(image_path, "rb") as image_file:
        image_base64 = base64.b64encode(image_file.read())

    if not os.path.exists(image_path):
        return TextContent(type="text", text=f"Image not found at {image_path}")
    return ImageContent(type="image", data=image_base64, mimeType="image/png")


@mcp.tool()
def calculate_fermi_velocity_tool(h5_file_path: str) -> TextContent:
    """Calculate the Fermi velocity from a band.h5 file.

    Args:
        h5_file_path: Path to the band.h5 file.

    Returns:
        Fermi velocity in m/s.
    """
    try:
        fermi_velocity = calculate_fermi_velocity(h5_file_path)
        return TextContent(
            type="text", text=f"Calculated Fermi velocity: {fermi_velocity:.2e} m/s"
        )
    except Exception as e:
        return TextContent(
            type="text", text=f"Error calculating Fermi velocity: {str(e)}"
        )


if __name__ == "__main__":
    mcp.run("stdio")
