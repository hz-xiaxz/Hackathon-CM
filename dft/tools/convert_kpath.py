#!/usr/bin/env python3
"""
Convert vaspkit KPATH.in file to K_PATH format.

The script reads KPATH.in generated by vaspkit and converts it to a format
suitable for other programs, where each line represents a band segment with:
[number_of_points] [start_x] [start_y] [start_z] [end_x] [end_y] [end_z] [start_label] [end_label]
"""

import sys


def read_kpath_file(filename):
    """
    Read and parse the KPATH.in file.

    Args:
        filename (str): Path to the KPATH.in file

    Returns:
        tuple: (num_points, segments) where segments is a list of (start_kpoint, end_kpoint)
    """
    with open(filename, "r") as f:
        lines = f.readlines()

    # Extract number of points (second line)
    num_points = int(lines[1].strip())

    # Parse k-point segments
    segments = []
    i = 4  # Start after header lines

    while i < len(lines):
        # Skip empty lines
        if lines[i].strip() == "":
            i += 1
            continue

        # Read start point
        start_line = lines[i].strip()
        start_parts = start_line.split()
        start_coords = [float(x) for x in start_parts[:3]]
        # The label is the 4th element (index 3) in the split parts
        start_label = start_parts[3] if len(start_parts) > 3 else ""

        # Read end point
        i += 1
        end_line = lines[i].strip()
        end_parts = end_line.split()
        end_coords = [float(x) for x in end_parts[:3]]
        # The label is the 4th element (index 3) in the split parts
        end_label = end_parts[3] if len(end_parts) > 3 else ""

        # Add segment
        segments.append(((start_coords, start_label), (end_coords, end_label)))

        i += 2  # Skip the next empty line and move to next segment

    return num_points, segments


def write_k_path_file(filename, num_points, segments):
    """
    Write segments to K_PATH format.

    Args:
        filename (str): Output filename
        num_points (int): Number of points per segment
        segments (list): List of (start_kpoint, end_kpoint) tuples
    """
    with open(filename, "w") as f:
        for (start_coords, start_label), (end_coords, end_label) in segments:
            # Format: [num_points] [start_coords] [end_coords] [start_label] [end_label]
            line = f"{num_points}  {start_coords[0]:.5f} {start_coords[1]:.5f} {start_coords[2]:.5f}  {end_coords[0]:.5f} {end_coords[1]:.5f} {end_coords[2]:.5f}  {start_label} {end_label}\n"
            f.write(line)


def convert_kpath(input_file, output_file):
    num_points, segments = read_kpath_file(input_file)
    write_k_path_file(output_file, num_points, segments)


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python convert_kpath.py <input_KPATH.in> <output_K_PATH>")
        sys.exit(1)

    input_file = sys.argv[1]
    output_file = sys.argv[2]

    try:
        convert_kpath(input_file, output_file)
        print(f"Successfully converted {input_file} to {output_file}")
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)
